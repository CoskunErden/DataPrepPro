"""
data_cleaning.py
================

This module contains functions for cleaning data and visualizing data properties.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

class DataCleaner:
    """Class for cleaning data and visualizing data properties."""

    def __init__(self, df: pd.DataFrame):
        """
        Initialize with the dataframe to be cleaned and visualized.

        Args:
            df (pd.DataFrame): The dataframe to clean and visualize.
        """
        self.df = df

    def show_missing_values(self):
        """
        Visualize missing values in the dataframe.
        """
        plt.figure(figsize=(12, 6))
        sns.heatmap(self.df.isnull(), cbar=False, cmap='viridis')
        plt.title('Missing Values Heatmap')
        plt.show()

    def missing_values_percentage(self):
        """
        Plot the percentage of missing values per column.
        """
        missing_percentage = (self.df.isnull().sum() / len(self.df)) * 100
        missing_percentage = missing_percentage[missing_percentage > 0].sort_values()

        plt.figure(figsize=(12, 6))
        missing_percentage.plot(kind='barh', color='skyblue')
        plt.title('Percentage of Missing Values per Column')
        plt.xlabel('Percentage')
        plt.show()

    def remove_missing_values(self, threshold: float = 0.5) -> pd.DataFrame:
        """
        Remove columns with missing values above a specified threshold.

        Args:
            threshold (float): The threshold for missing values.

        Returns:
            pd.DataFrame: The cleaned dataframe.
        """
        self.df = self.df.loc[:, self.df.isnull().mean() < threshold]
        return self.df

    def fill_missing_values(self, strategy: str = 'mean') -> pd.DataFrame:
        """
        Fill missing values in the dataframe.

        Args:
            strategy (str): The strategy to fill missing values ('mean', 'median', 'mode', 'constant').

        Returns:
            pd.DataFrame: The dataframe with filled values.
        """
        if strategy not in ['mean', 'median', 'mode']:
            raise ValueError("Strategy not recognized. Use 'mean', 'median', 'mode'.")

        # Fill missing values for numerical columns
        numerical_cols = self.df.select_dtypes(include=['number']).columns
        if strategy == 'mean':
            self.df[numerical_cols] = self.df[numerical_cols].fillna(self.df[numerical_cols].mean())
        elif strategy == 'median':
            self.df[numerical_cols] = self.df[numerical_cols].fillna(self.df[numerical_cols].median())
        elif strategy == 'mode':
            self.df[numerical_cols] = self.df[numerical_cols].apply(lambda x: x.fillna(x.mode().iloc[0]))

        # Fill missing values for categorical columns
        categorical_cols = self.df.select_dtypes(include=['object', 'category']).columns
        self.df[categorical_cols] = self.df[categorical_cols].apply(lambda x: x.fillna(x.mode().iloc[0]))

        return self.df

    def list_features(self):
        """
        List categorical and numerical features in the dataframe.

        Returns:
            tuple: A tuple containing two lists - categorical features and numerical features.
        """
        categorical_features = self.df.select_dtypes(include=['object', 'category']).columns.tolist()
        numerical_features = self.df.select_dtypes(include=['number']).columns.tolist()
        return categorical_features, numerical_features

    def summary_statistics(self):
        """
        Provide summary statistics for numerical features.

        Returns:
            pd.DataFrame: Summary statistics of numerical features.
        """
        return self.df.describe()

    def count_categorical_features(self):
        """
        Provide counts and unique values for categorical features.

        Returns:
            dict: A dictionary with categorical feature names as keys and their value counts as values.
        """
        categorical_features = self.df.select_dtypes(include=['object', 'category']).columns
        return {feature: self.df[feature].value_counts() for feature in categorical_features}
